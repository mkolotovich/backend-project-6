- const getInputName = (property, multiple) => multiple === 'filter' ? `${property}` : `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {}, label)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= label
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin textarea(entity, propertyName, errors = {}, label)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= label
    textarea(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
    )&attributes(attributes)=entity.description
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin select(entity, arr, propertyName, errors = {}, label, multiple)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= label
    if (multiple === true)
      select(
        id= inputId
        name=getInputName(propertyName)
        class=classLine
        multiple
      )&attributes(attributes)
        if(arr.length > 0)
          each item in arr
            if(item.name)
              if(item.id ===_.get(entity, propertyName, ''))
                option(value=item.id selected)= item.name
              else if(Array.isArray(entity))
                if (entity.includes(item.id))
                  option(value=item.id selected)= item.name
                else
                  option(value=item.id)= item.name
              else
                option(value=item.id)= item.name
            else
              if(item.id ===_.get(entity, propertyName, ''))
                option(value=item.id selected)= item.firstName + ' ' + item.lastName
              else
                option(value=item.id)= item.firstName + ' ' + item.lastName
      if !_.isEmpty(propertyErrors)
        .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')
    else 
      select(
        id= inputId
        name=getInputName(propertyName, multiple)
        class=classLine
      )&attributes(attributes)
        option(value="")
        if(arr.length > 0)
          each item in arr
            if(item.name)
              if(item.id ===_.get(entity, propertyName, ''))
                option(value=item.id selected)= item.name
              else if(Number(entity) === item.id)
                option(value=item.id selected)= item.name
              else
                option(value=item.id)= item.name
            else
              if(item.id ===_.get(entity, propertyName, ''))
                option(value=item.id selected)= item.firstName + ' ' + item.lastName
              else if(Number(entity) === item.id)
                option(value=item.id selected)= item.firstName + ' ' + item.lastName
              else
                option(value=item.id)= item.firstName + ' ' + item.lastName
      if !_.isEmpty(propertyErrors)
        .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
